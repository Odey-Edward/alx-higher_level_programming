>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> g = BaseGeometry()
>>> g.integer_validator("se", 3)
>>> g.integer_validator("se", None)
Traceback (most recent call last):
...
TypeError: se must be an integer

>>> g.integer_validator("se", float("inf"))
Traceback (most recent call last):
...
TypeError: se must be an integer

>>> g.integer_validator("se", -float("inf"))
Traceback (most recent call last):
...
TypeError: se must be an integer

>>> g.integer_validator("se", -4)
Traceback (most recent call last):
...
ValueError: se must be greater than 0

>>> g.integer_validator("se", 0)
Traceback (most recent call last):
...
ValueError: se must be greater than 0

>>> g.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> g.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> g.integer_validator("name")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> g.integer_validator("name", "4")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> g.integer_validator("name", (4,))
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> g.integer_validator("name", [6])
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> g.integer_validator("name", True)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> g.integer_validator("name", {3, 5})
Traceback (most recent call last):
...
TypeError: name must be an integer
